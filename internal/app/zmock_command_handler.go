// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package app

import (
	"context"
	"sync"
)

// Ensure, that CommandHandlerMock does implement CommandHandler.
// If this is not the case, regenerate this file with moq.
var _ CommandHandler = &CommandHandlerMock{}

// CommandHandlerMock is a mock implementation of CommandHandler.
//
//	func TestSomethingThatUsesCommandHandler(t *testing.T) {
//
//		// make and configure a mocked CommandHandler
//		mockedCommandHandler := &CommandHandlerMock{
//			HandleFunc: func(ctx context.Context, cmd Command) ([]Event, error) {
//				panic("mock out the Handle method")
//			},
//		}
//
//		// use mockedCommandHandler in code that requires CommandHandler
//		// and then make assertions.
//
//	}
type CommandHandlerMock struct {
	// HandleFunc mocks the Handle method.
	HandleFunc func(ctx context.Context, cmd Command) ([]Event, error)

	// calls tracks calls to the methods.
	calls struct {
		// Handle holds details about calls to the Handle method.
		Handle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cmd is the cmd argument value.
			Cmd Command
		}
	}
	lockHandle sync.RWMutex
}

// Handle calls HandleFunc.
func (mock *CommandHandlerMock) Handle(ctx context.Context, cmd Command) ([]Event, error) {
	if mock.HandleFunc == nil {
		panic("CommandHandlerMock.HandleFunc: method is nil but CommandHandler.Handle was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Cmd Command
	}{
		Ctx: ctx,
		Cmd: cmd,
	}
	mock.lockHandle.Lock()
	mock.calls.Handle = append(mock.calls.Handle, callInfo)
	mock.lockHandle.Unlock()
	return mock.HandleFunc(ctx, cmd)
}

// HandleCalls gets all the calls that were made to Handle.
// Check the length with:
//
//	len(mockedCommandHandler.HandleCalls())
func (mock *CommandHandlerMock) HandleCalls() []struct {
	Ctx context.Context
	Cmd Command
} {
	var calls []struct {
		Ctx context.Context
		Cmd Command
	}
	mock.lockHandle.RLock()
	calls = mock.calls.Handle
	mock.lockHandle.RUnlock()
	return calls
}
