// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package app

import (
	"context"
	"sync"
)

// Ensure, that QueryHandlerMock does implement QueryHandler.
// If this is not the case, regenerate this file with moq.
var _ QueryHandler = &QueryHandlerMock{}

// QueryHandlerMock is a mock implementation of QueryHandler.
//
//	func TestSomethingThatUsesQueryHandler(t *testing.T) {
//
//		// make and configure a mocked QueryHandler
//		mockedQueryHandler := &QueryHandlerMock{
//			HandleFunc: func(ctx context.Context, query Query) (any, error) {
//				panic("mock out the Handle method")
//			},
//		}
//
//		// use mockedQueryHandler in code that requires QueryHandler
//		// and then make assertions.
//
//	}
type QueryHandlerMock struct {
	// HandleFunc mocks the Handle method.
	HandleFunc func(ctx context.Context, query Query) (any, error)

	// calls tracks calls to the methods.
	calls struct {
		// Handle holds details about calls to the Handle method.
		Handle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Query is the query argument value.
			Query Query
		}
	}
	lockHandle sync.RWMutex
}

// Handle calls HandleFunc.
func (mock *QueryHandlerMock) Handle(ctx context.Context, query Query) (any, error) {
	if mock.HandleFunc == nil {
		panic("QueryHandlerMock.HandleFunc: method is nil but QueryHandler.Handle was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Query Query
	}{
		Ctx:   ctx,
		Query: query,
	}
	mock.lockHandle.Lock()
	mock.calls.Handle = append(mock.calls.Handle, callInfo)
	mock.lockHandle.Unlock()
	return mock.HandleFunc(ctx, query)
}

// HandleCalls gets all the calls that were made to Handle.
// Check the length with:
//
//	len(mockedQueryHandler.HandleCalls())
func (mock *QueryHandlerMock) HandleCalls() []struct {
	Ctx   context.Context
	Query Query
} {
	var calls []struct {
		Ctx   context.Context
		Query Query
	}
	mock.lockHandle.RLock()
	calls = mock.calls.Handle
	mock.lockHandle.RUnlock()
	return calls
}
