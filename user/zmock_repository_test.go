// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package user

import (
	"context"
	"github.com/google/uuid"
	"sync"
)

// Ensure, that UserRepositoryMock does implement UserRepository.
// If this is not the case, regenerate this file with moq.
var _ UserRepository = &UserRepositoryMock{}

// UserRepositoryMock is a mock implementation of UserRepository.
//
//	func TestSomethingThatUsesUserRepository(t *testing.T) {
//
//		// make and configure a mocked UserRepository
//		mockedUserRepository := &UserRepositoryMock{
//			FindByIdFunc: func(ctx context.Context, id uuid.UUID) (*User, error) {
//				panic("mock out the FindById method")
//			},
//			SaveFunc: func(ctx context.Context, u User) error {
//				panic("mock out the Save method")
//			},
//		}
//
//		// use mockedUserRepository in code that requires UserRepository
//		// and then make assertions.
//
//	}
type UserRepositoryMock struct {
	// FindByIdFunc mocks the FindById method.
	FindByIdFunc func(ctx context.Context, id uuid.UUID) (*User, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, u User) error

	// calls tracks calls to the methods.
	calls struct {
		// FindById holds details about calls to the FindById method.
		FindById []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// U is the u argument value.
			U User
		}
	}
	lockFindById sync.RWMutex
	lockSave     sync.RWMutex
}

// FindById calls FindByIdFunc.
func (mock *UserRepositoryMock) FindById(ctx context.Context, id uuid.UUID) (*User, error) {
	if mock.FindByIdFunc == nil {
		panic("UserRepositoryMock.FindByIdFunc: method is nil but UserRepository.FindById was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockFindById.Lock()
	mock.calls.FindById = append(mock.calls.FindById, callInfo)
	mock.lockFindById.Unlock()
	return mock.FindByIdFunc(ctx, id)
}

// FindByIdCalls gets all the calls that were made to FindById.
// Check the length with:
//
//	len(mockedUserRepository.FindByIdCalls())
func (mock *UserRepositoryMock) FindByIdCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockFindById.RLock()
	calls = mock.calls.FindById
	mock.lockFindById.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *UserRepositoryMock) Save(ctx context.Context, u User) error {
	if mock.SaveFunc == nil {
		panic("UserRepositoryMock.SaveFunc: method is nil but UserRepository.Save was just called")
	}
	callInfo := struct {
		Ctx context.Context
		U   User
	}{
		Ctx: ctx,
		U:   u,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(ctx, u)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//
//	len(mockedUserRepository.SaveCalls())
func (mock *UserRepositoryMock) SaveCalls() []struct {
	Ctx context.Context
	U   User
} {
	var calls []struct {
		Ctx context.Context
		U   User
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}
